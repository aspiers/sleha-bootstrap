#!/bin/bash
#
# Copyright (c) 2010 Novell Inc., Tim Serong <tserong@novell.com>
#                        All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

. /usr/lib/hae-functions

usage()
{
	cat <<END
Usage: $0 [options] [stage]

Options:
    -h          Display this usage information
    -q          Be quiet (don't describe what's happening, just do it)
    -y          Answer "yes" to all prompts (use with care)

Stage can be one of:
    ssh         Create SSH keys for passwordless SSH between cluster nodes
    csync2      Configure csync2
    corosync    Configure corosync

If stage is not specified, each stage will be invoked in sequence.
END
	exit 0
}

init_ssh()
{
	start_service sshd

	invoke mkdir -m 700 -p /root/.ssh

	if [ -f /root/.ssh/id_rsa ]; then
		prompt_for_overwrite \
			'/root/.ssh/id_rsa already exists' || return
		invoke rm -f /root/.ssh/id_rsa
	fi

	status "Generating ssh key"
	invoke ssh-keygen -q -f /root/.ssh/id_rsa \
		-C 'Cluster Internal' -N '' \
		|| error "Failed to generate SSH key"
	# TODO: if run multiple times, results in multiple additions!
	append /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
}

init_csync2()
{
	status "Configuring csync2"

	if [ -f "$CSYNC2_KEY" ] || \
		grep -v -q -s '^[[:space:]]*\(#.*\)*$' $CSYNC2_CFG
	then
		prompt_for_overwrite 'csync2 is already configured' || return
	fi

	invoke rm -f $CSYNC2_KEY
	status_long "Generating csync2 shared key (this may take a while)"
	# On a quiet VM, "a while" can be "way too long" (not enough entropy)
	invoke csync2 -k $CSYNC2_KEY || error "Can't create csync2 key $keyfile"
	status_done

	local tmp_conf=${CSYNC2_CFG}.$$
	cat > $tmp_conf <<END
group ha_group
{
	key /etc/csync2/key_hagroup;
	host $(hostname);
	include /etc/corosync/corosync.conf;
	include /etc/corosync/authkey;
	include /etc/csync2/csync2.cfg;
	include /etc/csync2/key_hagroup;
	include /etc/ctdb/nodes;
	include /etc/drbd.d;
	include /etc/ha.d/ldirectord.cf;
	include /etc/lvm/lvm.conf;
	include /etc/multipath.conf;
	include /etc/samba/smb.conf;
	include /etc/sysconfig/openais;
	include /etc/sysconfig/pacemaker;
	include /etc/sysconfig/sbd;
}
END
	install_tmp $tmp_conf $CSYNC2_CFG

	# Can't use start_service for csync2, because it runs inside xinetd
	status "Enabling csync2 service"
	invoke chkconfig csync2 on
	start_service xinetd

	status "csync2 checking files"
	invoke csync2 -cr /
}

# It would be nice if we could just have csync2.cfg include a directory,
# which in turn included one file per node which would be referenced via
# something like "group ha_group { ... config: /etc/csync2/hosts/*; }"
# That way, adding a new node would just mean adding a single new file
# to that directory.  Unfortunately, the 'config' statement only allows
# inclusion of specific individual files, not multiple files via wildcard.
# So we have this function which is called by hae-join to add the new
# remote node to csync2 config on some existing node.  It is intentionally
# not documented in hae-init's user-visible usage information.
init_csync2_remote()
{
	local newhost=$1
	local thishost=$(hostname)
	[ -n "$newhost" ] || error "Hostname not specified"

	BE_QUIET=true

	# If host doesn't already exist in csync2 config, add it
	if ! egrep -q -s \
		"^[[:space:]]*host.*[[:space:]]+${newhost}[[:space:];]" \
		$CSYNC2_CFG
	then
		local tmp_conf=${CSYNC2_CFG}.$$
		awk '/^[[:space:]]*host[[:space:]]/ \
			{ if (h==0) print "\thost '$newhost';"; h=1; } \
			{ print $0 } ' $CSYNC2_CFG > $tmp_conf
		install_tmp $tmp_conf $CSYNC2_CFG
		invoke csync2 -c $CSYNC2_CFG
	else
		log ": Nothing to do - remote host $newhost already exists"
	fi
}

# TODO: handle -q and -y
init_corosync()
{
	if $YES_TO_ALL; then
		status 'Configuring corosync'
	else
		status "
Configure Corosync:
  This will configure the cluster messaging layer.  You will need
  to specify a network address over which to communicate (default
  is ${NET_IF}'s network, but you can use the network address of any
  active interface), a multicast address and multicast port.
"
	fi

	if [ -f "$COROSYNC_CONF" ]; then
		prompt_for_overwrite \
			"$COROSYNC_CONF already exists" || return
	fi

	local bindnetaddr=$(prompt_for_string \
		'Network address to bind to (e.g.: 192.168.1.0)' \
		'([0-9]+\.){3}[0-9]+' "$IP_NETWORK")
	[ -z "$bindnetaddr" ] && error 'No value for bindnetaddr'

	local mcastaddr=$(prompt_for_string \
		'Multicast address (e.g.: 239.x.x.x)' \
		'([0-9]+\.){3}[0-9]+' \
		239.$(random_256).$(random_256).$(random_256))
	[ -z "$mcastaddr" ] && error 'No value for mcastaddr'

	local mcastport=$(prompt_for_string \
		'Multicast port' \
		'[0-9]+' 5405);
	[ -z "$mcastport" ] && error 'No value for mcastport'

	# Config defaults from yast2-cluster (SLE 11 SP1 HAE)
	# TODO: get this from example config file by default!
	local tmp_conf=${COROSYNC_CONF}.$$
	cat > $tmp_conf <<END
aisexec {
	#Group to run aisexec as. Needs to be root for Pacemaker
	group:	root
	#User to run aisexec as. Needs to be root for Pacemaker
	user:	root
}
service {
	#Default to start mgmtd with pacemaker
	use_mgmtd:	yes
	ver:	0
	name:	pacemaker
}
totem {
	#The mode for redundant ring. None is used when only 1 interface specified, otherwise, only active or passive may be choosen
	rrp_mode:	none
	#How long to wait for join messages in membership protocol. in ms
	join:	60
	#The only valid version is 2
	version:	2
	#The virtual synchrony filter type used to indentify a primary component. Change with care.
	vsftype:	none
	#Timeout for a token lost. in ms
	token:	3000
	#How long to wait for consensus to be achieved before starting a new round of membership configuration.
	consensus:	4000
	#HMAC/SHA1 should be used to authenticate all message
	secauth:	off
	#How many token retransmits should be attempted before forming a new configuration.
	token_retransmits_before_loss_const:	10
	interface {
		#Network Address to be bind for this interface setting
		bindnetaddr:	$bindnetaddr
		#The multicast address to be used
		mcastaddr:	$mcastaddr
		#The multicast port to be used
		mcastport:	$mcastport
		#The ringnumber assigned to this interface setting
		ringnumber:	0
	}
	#To make sure the auto-generated nodeid is positive
	clear_node_high_bit:	yes
	#The maximum number of messages that may be sent by one processor on receipt of the token.
	max_messages:	20
}
logging {
	#Log to a specified file
	to_logfile:	no
	#Log timestamp as well
	timestamp:	on
	#Facility in syslog
	syslog_facility:	daemon
	#Log to syslog
	to_syslog:	yes
	#Whether or not turning on the debug information in the log
	debug:	off
	#Log to the standard error output
	to_stderr:	yes
	#Logging file line in the source code as well
	fileline:	off
}
amf {
	#Enable or disable AMF
	mode:	disable
}
END
	install_tmp $tmp_conf $COROSYNC_CONF
	invoke csync2 -xv $COROSYNC_CONF
}

while getopts 'hqy' o; do
	case $o in
	h) usage;;
	q) BE_QUIET=true;;
	y) YES_TO_ALL=true;;
	esac
done

shift $(($OPTIND - 1))

case $1 in
ssh|csync2|csync2_remote|corosync)
	log_start
	# $2 == nasty hack to pick up IP arg to csync2_remote
	init_$1 $2
	;;
"")
	log_start
	init_ssh
	init_csync2
	init_corosync
	;;
*)	echo -e "Invalid stage ($1)\n"
	usage
esac

status "Done"
exit 0
