#!/bin/bash
#
# Copyright (c) 2010 Novell Inc., Tim Serong <tserong@novell.com>
#                        All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

. /usr/lib/hae-functions

declare SEED_HOST

usage()
{
	cat <<END
Usage: $0 [options] [stage]

Options:
    -c          IP address or hostname of existing cluster node
    -h          Display this usage information

Stage can be one of:
    ssh         Obtain ssh key from existing cluster node (requires -c <ip>)

If stage is not specified, each stage will be invoked in sequence.
END
	exit 0
}

join_ssh()
{
	[ -n "$SEED_HOST" ] || error "No seed IP/hostname specified"

	start_service sshd

	invoke mkdir -m 700 -p /root/.ssh

	if [ -f /root/.ssh/id_rsa ]; then
		prompt_for_overwrite \
			'/root/.ssh/id_rsa already exists' || return
	fi

	invoke scp -oStrictHostKeyChecking=no \
		root@$SEED_HOST:'/root/.ssh/id_rsa*' /root/.ssh/ || \
		error "Can't retrieve SSH keys from $1"
	append /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
}

#join_csync2()
#{
#}

while getopts 'c:h' o; do
	case $o in
	c) SEED_HOST=$OPTARG;;
	h) usage;;
	esac
done

shift $(($OPTIND - 1))

case $1 in
ssh)
	log_start
	join_$1
	;;
"")
	log_start
	join_ssh
	;;
*)	echo -e "Invalid stage ($1)\n"
	usage
esac

exit 0
