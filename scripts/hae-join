#!/bin/bash
#
# Copyright (c) 2010 Novell Inc., Tim Serong <tserong@novell.com>
#                        All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

. /usr/lib/hae-functions

declare SEED_HOST

usage()
{
	cat <<END
Usage: $0 [options] [stage]

Options:
    -c          IP address or hostname of existing cluster node
    -h          Display this usage information
    -q          Be quiet (don't describe what's happening, just do it)
    -y          Answer "yes" to all prompts (use with care)

Stage can be one of:
    ssh         Obtain SSH keys from existing cluster node (requires -c <ip>)
    csync2      Configure csync2 (requires -c <ip>)
    cluster     Start the cluster on this node

If stage is not specified, each stage will be invoked in sequence.
END
	exit 0
}

join_ssh()
{
	[ -n "$SEED_HOST" ] || error "No seed IP/hostname specified (use -c option)"

	start_service sshd

	invoke mkdir -m 700 -p /root/.ssh

	if [ -f /root/.ssh/id_rsa ]; then
		prompt_for_overwrite \
			'/root/.ssh/id_rsa already exists' || return
	fi

	status "Retrieving SSH keys from $SEED_HOST"
	invoke scp -oStrictHostKeyChecking=no \
		root@$SEED_HOST:'/root/.ssh/id_rsa*' /root/.ssh/ \
		|| error "Can't retrieve SSH keys from $SEED_HOST"
	# TODO: if run multiple times, results in multiple additions!
	append /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
}

join_csync2()
{
	status "Configuring csync2"

	invoke ssh root@$SEED_HOST hae-init csync2_remote $(hostname) \
		|| error "Can't invoke hae-init csync2_remote on $SEED_HOST"

	invoke scp root@$SEED_HOST:'/etc/csync2/{csync2.cfg,key_hagroup}' \
		/etc/csync2 \
		|| error "Can't retrieve csync2 config from $SEED_HOST"

	# Can't use start_service for csync2, because it runs inside xinetd
	status "Enabling csync2 service"
	invoke chkconfig csync2 on
	start_service xinetd

	# TODO: is there a better way to force everything here to be
	# sync'd to the new node than "-mr /"?  Surely that shouldn't
	# really be necessary...
	invoke ssh root@$SEED_HOST 'csync2 -mr / ; csync2 -xv'
}

join_cluster()
{
	rcopenais status >/dev/null
	rc=$?
	[ $rc -eq 0 ] && error "Cluster is currently active - can't run"
	[ $rc -ne 7 ] && error "rcopenais status returned unexpected status ($rc)"

	# reset password, but only if it's not already set
	local ps=$(passwd -S hacluster 2>/dev/null | cut -d' ' -f2)
	local pass_msg
	if [ "$ps" != "PS" ]; then
		log ': Resetting password of hacluster user'
		echo "linux" | passwd --stdin hacluster > /dev/null
		pass_msg=", password 'linux'"
	fi

	# evil, but necessary
	invoke rm -f /var/lib/heartbeat/crm/*

	start_service hawk
	status "  HA Web Konsole is now running, to see cluster status go to:"
	[ -n "$IP_ADDRESS" ] && status "    https://$IP_ADDRESS:7630/" \
		|| status "    https://SERVER:7630/"
	status "  Log in with username 'hacluster'${pass_msg}"

	start_service openais
	wait_for_cluster
}

while getopts 'c:hqy' o; do
	case $o in
	c) SEED_HOST=$OPTARG;;
	h) usage;;
	q) BE_QUIET=true;;
	y) YES_TO_ALL=true;;
	esac
done

shift $(($OPTIND - 1))

case $1 in
ssh|csync2|cluster)
	log_start
	join_$1
	;;
"")
	log_start
	join_ssh
	join_csync2
	join_cluster
	;;
*)	echo -e "Invalid stage ($1)\n"
	usage
esac

status "Done"
exit 0
